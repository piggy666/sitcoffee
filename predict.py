import tensorflow as tf
import sys
import numpy
import re
rng = numpy.random

# Parameters

if __name__ == "__main__":
    test_X = []
    file = sys.argv[1]
    reg = re.compile('\d{4}-\d{2}-\d{2}')
    match = reg.search(file)
    #print match.group()
    with open(file) as f:
        for line in f:
            linelist = line.strip('\r\n').split('\t')
            for i in range(len(linelist)):
                linelist[i] = float(linelist[i])
            test_X.append(linelist)

    X = numpy.matrix(test_X)
    #W =  [[0.7703621983528137], [1.4591244459152222], [0.8414471745491028], [0.5566825866699219], [0.3796555697917938], [-0.3004835844039917], [-0.1975182741880417], [-0.04102170839905739], [1.4541938304901123], [-0.9527959823608398], [2.2889113426208496], [-0.6375296115875244], [-1.4018234014511108], [-0.8053417205810547], [-0.329001247882843], [2.0932137966156006], [1.6029261350631714], [0.5257368087768555], [0.2319851964712143], [-1.4735175371170044], [0.22246579825878143], [-0.6898077130317688], [0.41344335675239563], [-0.6935241222381592], [0.5286237597465515], [0.8068562746047974], [1.6880894899368286], [-0.9111576676368713], [1.6784955263137817], [-0.45154646039009094], [-1.295192837715149], [0.5921233892440796], [-0.2588438391685486], [-1.010558009147644], [-0.5697327852249146]] 
    #b= [-0.7919629216194153]
    #W= [[0.00124113610945642], [-0.000858253100886941], [0.0004929733695462346], [0.0009669300634413958], [-0.00023777008755132556], [0.0006793635548092425], [0.0008624290348961949], [0.001174046192318201], [0.11375556141138077], [0.0], [-0.00010708131594583392], [-8.602201705798507e-05], [0.00027691933792084455], [0.000666735926643014], [0.007129747420549393], [-0.00017446652054786682], [0.000398186850361526], [0.027286997064948082], [0.0], [-9.400333510711789e-05], [-3.831821959465742e-05], [0.00047708034981042147], [0.0009549997048452497], [-0.0014572753570973873], [-0.00015841849381104112], [0.0005085058510303497], [0.01706511341035366], [0.0], [-5.8086763601750135e-05], [-0.0001870926353149116], [0.00021724984981119633], [0.0008983694715425372], [0.0007742814486846328], [-0.0001580851385369897], [0.000245486618950963]] 
    #b= [0.8289880752563477]
    #W= [[6.469110758189345e-06], [-2.5593469672458014e-06], [1.233744342243881e-06], [2.5046567486697313e-08], [-4.686620286520338e-06], [7.170739877437882e-07], [8.160837978721247e-07], [-2.318073711649049e-06], [0.0003253757895436138], [0.0], [-4.112195313155098e-07], [-4.2351530282758176e-07], [5.439543201646302e-06], [5.584230621025199e-06], [9.709517144074198e-06], [-4.5977706975008914e-08], [2.861863777070539e-07], [0.00020226268679834902], [0.0], [-6.585174219253531e-07], [-2.6537921371527773e-07], [6.2821554820402525e-06], [5.223492280492792e-06], [5.102001523482613e-06], [-4.413007559378457e-07], [6.654898925262387e-07], [0.0002926856395788491], [0.0], [-2.61118259459181e-07], [7.184781338764878e-07], [6.270565336308209e-06], [5.4442111832031514e-06], [-1.7412201486877166e-05], [-4.91097011945385e-08], [2.363929496596029e-08]] 
    #b= [[0.999675989151001]]
    #W= [[0.0005805664695799351], [-0.0005476478836499155], [9.660376235842705e-06], [0.0009011426009237766], [-0.0002656388096511364], [0.0004301505396142602], [-0.0001455273013561964], [0.00822361558675766], [0.11539297550916672], [-0.0021102866157889366], [-0.0001723749446682632], [0.00033022736897692084], [0.0003411514335311949], [0.0005252404371276498], [0.00183572166133672], [8.02858266979456e-05], [0.0001246492611244321], [0.02643563039600849], [-0.0004401596379466355], [-7.566774729639292e-05], [0.00031921517802402377], [0.000590152048971504], [0.0007142805843614042], [-6.734684575349092e-05], [-0.00024292769376188517], [0.00011662882752716541], [0.017204008996486664], [-0.0005308683030307293], [-1.2276694178581238e-05], [8.85830377228558e-05], [0.00015766924479976296], [0.0007919276831671596], [-0.004128363914787769], [8.719461038708687e-05], [-0.00012470129877328873]] 
    #b= [1.0201592445373535]

    #W= [[0.0003064319316763431], [-0.0002095779636874795], [0.0002585282491054386], [0.0004786569334100932], [-0.0003152772260364145], [0.00011769260163418949], [-5.102843715576455e-05], [0.0005508674075827003], [0.02886844240128994], [-0.0005195875419303775], [-5.4237003496382385e-05], [-0.00010234092769678682], [0.00047223170986399055], [0.0006252210587263107], [0.0002027048758463934], [-2.602699169074185e-06], [2.6524650820647366e-05], [0.013245195150375366], [-0.00027248062542639673], [-4.383055056678131e-05], [-7.761377491988242e-05], [0.0005384196410886943], [0.0006568034295924008], [0.0002449164749123156], [-3.454590478213504e-05], [5.90417803323362e-05], [0.014540279284119606], [-0.00034386879997327924], [-2.0070403479621746e-05], [-2.3047781724017113e-05], [0.0005203878972679377], [0.0006122884224168956], [-0.0013104543322697282], [-1.2192083886475302e-05], [1.370739937556209e-05]]
    #b= [0.9990971088409424]

    #W= [[0.00030663408688269556], [-0.00014797218318562955], [0.00026632577646523714], [0.00037783553125336766], [-0.00029050532612018287], [0.0002172526001231745], [-0.00011835655459435657], [0.0005562325823120773], [0.02975619211792946], [-0.0006175016169436276], [-4.7143257688730955e-05], [-7.118031498976052e-05], [0.00046328324242495], [0.0006457974086515605], [0.0004007226962130517], [-4.578178049996495e-07], [-9.642342774895951e-06], [0.012569490820169449], [-0.00031720465631224215], [-3.610500061768107e-05], [-4.731597800855525e-05], [0.0005355297471396625], [0.0006792130880057812], [0.00017934295465238392], [-1.3571527233580127e-05], [2.5751394787221216e-05], [0.013541614636778831], [-0.000378831202397123], [-1.722517845337279e-05], [6.565500370925292e-06], [0.0005031276377849281], [0.0006356437806971371], [-0.0011517205275595188], [1.8917577108368278e-05], [-2.305392627022229e-05]] 
    #b= [0.9967217445373535]
    #W= [[0.00025107094552367926], [-0.0003079841553699225], [-4.750947846332565e-05], [0.00027304553077556193], [-0.0003902243624906987], [0.00040008052019402385], [-0.0002939650439657271], [-0.0028223248664289713], [0.017415471374988556], [0.002871414413675666], [-0.0003765642468351871], [-6.474354449892417e-05], [-0.0002176380658056587], [0.00018060932052321732], [0.00032364760409109294], [0.025957584381103516], [-0.0002601947926450521], [1.2142267223680392e-05], [0.006544705480337143], [0.0016695819795131683], [-0.0001690811914158985], [-3.033345637959428e-05], [-9.762637637322769e-05], [0.0004161238903179765], [0.0003770355542656034], [-0.04088901728391647], [0.0003494180564302951], [-4.037027792946901e-06], [0.008645336143672466], [0.0009392101783305407], [-0.00022469944087788463], [2.5614590413169935e-06], [-9.454355677007698e-06], [0.00035653187660500407], [0.00041843648068606853], [0.014678213745355606], [-0.00014968468167353421], [-1.70987314049853e-05]] 
    #b= [1.0072195529937744] 

    W= [[2.6968187739839777e-05], [2.7976879209745675e-05], [2.7610538381850347e-05]] 
    b= [0.9999730587005615] 

    W = numpy.matrix(W)
    b = numpy.matrix(b)

    X = X[:,2:]
    print X
    Y = X * W + b
    #Y = b
    #for pow_i in range(1,3):
    #    Y = numpy.power(X, pow_i) * W + Y

    test_Y = Y.tolist()
    
    for i in range(Y.shape[0]):
        gap = test_Y[i][0]
        if gap < 0:
            gap = 0.0
        start_dist = str(int(test_X[i][0]))
        timeseg = match.group() + "-" + str(int(test_X[i][1]))

        print "%s,%s,%s" % (start_dist, timeseg, gap)





    # Testing example, as requested (Issue #2)
    #test_X = numpy.asarray([6.83,4.668,8.9,7.91,5.7,8.7,3.1,2.1])
    #test_Y = numpy.asarray([1.84,2.273,3.2,2.831,2.92,3.24,1.35,1.03])

    #print "Testing... (L2 loss Comparison)"
    #testing_cost = sess.run(tf.reduce_sum(tf.pow(activation-Y, 2))/(2*test_X.shape[0]),
    #                        feed_dict={X: test_X, Y: test_Y}) #same function as cost above
    #print "Testing cost=", testing_cost
    #print "Absolute l2 loss difference:", abs(training_cost - testing_cost)
